!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Katnip=t()}(this,function(){"use strict";function e(e){const t=128/e.sampleRate,i=e.createGain(),n=e.createDelay(.05),s=e.createDelay(.01);s.delayTime.value=t;const a=e.createGain(),o=e.createGain(),c=e.createGain();return i.connect(n),n.connect(s),s.connect(c),i.connect(a),a.connect(c),a.gain.value=-.5,a.connect(o),n.connect(o),o.connect(n),o.gain.value=.5,i.setDelayTime=function(e){n.delayTime.value=e-t},i.setCoefficient=function(e){a.gain.value=-e,o.gain.value=e},i.connect=c.connect.bind(c),i.disconnect=c.disconnect.bind(c),i}function t(e){const t=128/e.sampleRate,i=e.createDelay(.1);var n=e.createDelay(.01);n.delayTime.value=t;const s=e.createBiquadFilter(),a=e.createGain();return s.Q.value=-3.0102999566398125,s.type="lowpass",i.connect(n),i.connect(s),s.connect(a),a.connect(i),i.dampening=s.frequency,i.feedback=a.gain,i.dampening.value=8e3,i.delayTime.value=.05,i.feedback.value=.5,i.setDelayTime=function(e){i.delayTime.value=e-t},i.connect=n.connect.bind(n),i.disconnect=n.disconnect.bind(n),i}function i(i){const{sampleRate:n}=i,s=[1557/n,1617/n,1491/n,1422/n,1277/n,1356/n,1188/n,1116/n],a=[225/n,556/n,441/n,341/n],o=i.createGain();o.channelCountMode="explicit",o.channelCount=2;let c=23/n;const r=i.createGain(),h=i.createChannelMerger(2),u=i.createChannelSplitter(2),l=i.createGain(),d=i.createGain();l.gain.value=1,d.gain.value=0,o.connect(d),o.connect(u),h.connect(l),l.connect(r),d.connect(r);const p=[],f=[],v=[],y=[];let g=.8,m=3e3;for(let t=0;t<a.length;t++){let n=new e(i);n.setDelayTime(a[t]),v.push(n),v[t-1]&&v[t-1].connect(n)}for(let t=0;t<a.length;t++){let n=new e(i);n.setDelayTime(a[t]),y.push(n),y[t-1]&&y[t-1].connect(n)}v[v.length-1].connect(h,0,0),y[y.length-1].connect(h,0,1);for(let e=0;e<s.length;e++){let n=new t(i);n.setDelayTime(s[e]),u.connect(n,0),n.connect(v[0]),p.push(n)}for(let e=0;e<s.length;e++){let n=new t(i);n.setDelayTime(s[e]+c),u.connect(n,1),n.connect(y[0]),f.push(n)}return Object.defineProperties(o,{roomSize:{get:function(){return g},set:function(e){g=e,N()}},dampening:{get:function(){return m},set:function(e){m=e,N()}},spread:{get:function(){return c},set:function(e){c=e;for(var t=0;t<s.length;t++)f[t].setDelayTime(s[t]+c)}},wetDryMix:{get:function(){return l.gain.value},set:function(e){l.gain.value=e,d.gain.value=1-e}},wet:{get:function(){return l.gain.value},set:function(e){l.gain.value=e}},dry:{get:function(){return d.gain.value},set:function(e){d.gain.value=e}}}),N(),o.connect=r.connect.bind(r),o.disconnect=r.disconnect.bind(r),o;function N(){for(let e=0;e<p.length;e++)p[e].feedback.value=g,p[e].dampening.value=m;for(let e=0;e<f.length;e++)f[e].feedback.value=g,f[e].dampening.value=m}}function n(e){const t=e.createGain(),i=e.createWaveShaper(),n=e.createGain();let s="circuitDerived";return t.connect(i),i.connect(n),Object.defineProperties(t,{type:{get:function(){return s},set:function(e){switch(s=e){case"circuitDerived":i.curve=function(e,t){var i,n,s=new Float32Array(1e5);for(i=0;i<1e5;i++)n=100*(2*i/99999-1),n*=20,s[i]=.05*((n-t)/(1-Math.exp(-1*(n-t)))+t/(1-Math.exp(-.5)));return s}(0,-.5);break;case"basicNonLinear":i.curve=function(){var e,t,i=new Float32Array(1e4);for(e=0;e<1e4;e++)t=2*e/9999-1,i[e]=1.5*t*(1-t*t/3);return i}();break;case"doidic":i.curve=function(){var e,t,i=new Float32Array(1e4);for(e=0;e<1e4;e++)t=2*e/9999-1,i[e]=Math.sign(t)*(2*Math.abs(t)-t*t);return i}();break;case"standard":i.curve=function(e){var t,i,n=1e3,s=0,a=new Float32Array(n),o=Math.PI/180;for(t=0;t<n;t++)i=2*t/n-1,a[t]=23*i*20*o/(Math.PI+20*Math.abs(i)),s<Math.abs(a[t])&&(s=Math.abs(a[t]));for(t=0;t<n;t++)a[t]/=s;return a}()}}}}),t.connect=n.connect.bind(n),t.disconnect=n.disconnect.bind(n),t}function s(e){return Math.pow(10,1*parseFloat(e)/20)}function a(e,t,i,n,s){return(i-t)*(e-n)/(s-n)+t}function o(e){return Math.sin(e*(Math.PI/2))}function c(e){return Math.cos(e*(Math.PI/2))}function r(e){const t={highGain:{driveType:"circuitDerived",curveOneType:"doidic",curveTwoType:"circuitDerived",curveThreeType:"basicNonLinear"},basic:{driveType:"basic",curveOneType:"basicNonLinear",curveTwoType:"basicNonLinear",curveThreeType:"basicNonLinear"}};let i="circuitDerived";const s=e.createGain(),a=e.createGain();a.gain.value=.01;const o=new n(e);o.type="circuitDerived";const c=e.createGain();c.gain.value=0;const r=e.createBiquadFilter();r.type="lowpass",r.Q.value=-3.0102999566398125,r.frequency.value=16e3;const h=e.createBiquadFilter();h.type="highpass",h.Q.value=-3.0102999566398125,h.frequency.value=20;const u=e.createGain();u.gain.value=.01;const l=new n(e);l.type="circuitDerived";const d=e.createGain();d.gain.value=0;const p=e.createGain();p.gain.value=.01;const f=new n(e);f.type="circuitDerived";const v=e.createGain();v.gain.value=0;const y=e.createGain();return s.connect(a),a.connect(o),o.connect(c),c.connect(r),r.connect(u),u.connect(l),l.connect(d),d.connect(h),h.connect(p),p.connect(f),f.connect(v),v.connect(y),Object.defineProperties(s,{model:{set:function(e){!function(e){o.type=t[e].curveOneType,l.type=t[e].curveTwoType,f.type=t[e].curveThreeType,i=t[e].driveType}(e)}},drive:{set:function(e){const{driveAmountOneValue:t,attenuationOneValue:n,driveAmountTwoValue:s,attenuationTwoValue:o,driveAmountThreeValue:r,attenuationThreeValue:h}=function(e,t){switch(e){case"circuitDerived":{const e=(1-(i=.1*t))*(1-i)*2*.1+2*i*(1-i)*(.1*5.9+.1)+i*i*2*6;return{driveAmountOneValue:e,attenuationOneValue:1,driveAmountTwoValue:.01,attenuationTwoValue:1,driveAmountThreeValue:1,attenuationThreeValue:e<1?1/e:1}}case"basic":{const e=t*t*.05+1,i=t*t*.04+1,n=t*t*.03+1;return{driveAmountOneValue:e,attenuationOneValue:1/e,driveAmountTwoValue:i,attenuationTwoValue:1/i,driveAmountThreeValue:n,attenuationThreeValue:1/n}}}var i}(i,e);a.gain.value=t,c.gain.value=n,u.gain.value=s,d.gain.value=o,p.gain.value=r,v.gain.value=h}}}),s.connect=y.connect.bind(y),s.disconnect=y.disconnect.bind(y),s}function h(e,t){this.context=e,this.rangeScaler=e.createGain(),this.rangeScaler.channelCount=1,this.rangeScaler.channelCountMode="explicit",this._frequency=void 0===t.frequency?this.metadata.frequency.default:t.frequency,this._phase=void 0===t.phase?this.metadata.phase.default:t.phase,this._amplitude=void 0===t.amplitude?this.metadata.amplitude.default:t.amplitude}function u(e){const t=e.createGain(),i=e.createGain();i.gain.value=.6;const n=e.createBiquadFilter();n.frequency.value=74,n.Q.value=1,n.type="highpass";const s=e.createBiquadFilter();s.frequency.value=350,s.type="peaking",s.Q.value=4,s.gain.value=-5;const a=e.createBiquadFilter();a.frequency.value=1300,a.type="highshelf",a.gain.value=3;const o=e.createBiquadFilter();o.type="highshelf",o.frequency.value=4500,o.gain.value=3.6;const c=e.createBiquadFilter();c.frequency.value=13e3,c.Q.value=0,c.type="lowpass";const r=e.createBiquadFilter();r.type="lowshelf",r.frequency.value=300;const h=e.createBiquadFilter();h.type="highshelf",h.frequency.value=450,h.gain.value=0;const u=e.createBiquadFilter();u.type="highshelf",u.frequency.value=1800,u.gain.value=0;const l=e.createBiquadFilter();l.type="highshelf",l.frequency.value=1800,l.gain.value=0;const d=e.createBiquadFilter();d.type="highshelf",d.frequency.value=1e4,d.gain.value=0;const p=e.createGain();return t.connect(i),i.connect(n),n.connect(s),s.connect(a),a.connect(o),o.connect(c),c.connect(r),r.connect(h),h.connect(u),u.connect(l),l.connect(d),d.connect(p),Object.defineProperties(t,{bass:{set:function(e){var t;t=e,r.gain.value=1.2*t-6,n.Q.value=Math.abs(-.4*t+5)}},mid:{set:function(e){var t;t=e,h.gain.value=1.2*t-6,u.gain.value=-1*(1.2*t-6)}},treble:{set:function(e){var t;t=e,l.gain.value=1.2*t-6,d.gain.value=-1*(1.2*t-6)}},presence:{set:function(e){e<5?o.gain.value=.86*e-4.7:(o.gain.value=1.28*e-6.8,c.frequency.value=-200*e+13e3)}}}),t.connect=p.connect.bind(p),t.disconnect=p.disconnect.bind(p),t}var l,d;function p(e,{slug:t,params:i,bypass:n}){switch(t){case"antiSqueal":return new g(e,i,n);case"cabinet":return new b(e,i,n);case"chorus":return new F(e,i,n);case"compressor":return new w(e,i,n);case"delay":return new m(e,i,n);case"filter":return new G(e,i,n);case"gain":return new y(e,i,n);case"guitarAmp":return new v(e,i,n);case"overdrive":return new q(e,i,n);case"phaser":return new x(e,i,n);case"reverb":return new N(e,i,n);case"reverbHybrid":return new T(e,i,n);case"springReverb":return new _(e,i,n);case"threeBandEq":return new M(e,i,n);case"tremolo":return new k(e,i,n);case"simpleStudioReverb":case"studioReverb":case"la2aCompr":case"compr1176":case"fiveBandParamEQ":case"exciter":case"multibandCompr":case"masteringLimiter":case"tapeSimulator":case"dimensionD":case"deEsser":return new R(e,t,i,n,2);case"autoWah":case"backCompr":case"bossCE5":case"ddelay":case"expGate":case"genericAmp":case"guitarAmp2":case"guitarCab":case"octaver":case"paramEQ":case"serafiniPreset":case"springReverb2":case"tubeScreamer":case"rossCompr":case"bigMuffPi":case"tubeScreamer2":case"bossMT2":case"bossBD2":case"proCoRat":case"mxrDistortion":case"fuzzFace":case"mxrPhase90":case"bossVB2":case"mxrUnivibe":case"ehSmallStone":case"bossGE7":case"acSimulator":return new R(e,t,i,n);default:throw new Error(`${t} is not supported.`)}}h.prototype=Object.create(null,{connect:{value:function(e){this.rangeScaler.connect(e)}},start:{value:function(){this.oscillator=this.context.createOscillator(),this.frequency=this._frequency,this.phase=this._phase,this.amplitude=this._amplitude,this.oscillator.setPeriodicWave(this._wave),this.oscillator.connect(this.rangeScaler),this.oscillator.start()}},stop:{value:function(){this.oscillator&&(this.oscillator.stop(),this.oscillator.disconnect(),this.oscillator=null)}},destroy:{value:function(){this.oscillator&&this.stop(),this.rangeScaler.disconnect(),this.rangeScaler=null}},phase:{get:function(){return this._phase},set:function(e){this._phase=e;var t,i=(t=this._phase*Math.PI/180,{real:new Float32Array([0,Math.sin(t)]),image:new Float32Array([0,Math.cos(t)])});this._wave=this.context.createPeriodicWave(i.real,i.image,{disableNormalization:!0}),this.oscillator&&this.oscillator.setPeriodicWave(this._wave)}},frequency:{get:function(){return this._frequency},set:function(e){this._frequency=e,this.oscillator&&(this.oscillator.frequency.value=this._frequency)}},amplitude:{get:function(){return this.rangeScaler.gain.value},set:function(e){this._amplitude=e,this.rangeScaler.gain.value=this._amplitude}},metadata:{value:{frequency:{default:1,min:0,max:20,automatable:!1,type:"float"},amplitude:{default:1,type:"float"},phase:{default:0,min:0,max:360,automatable:!1,type:"float"}}}});class f{constructor(e,t,i=!1){this.context=e,this.input=e.createGain(),this.output=e.createGain(),this.coreInput=e.createGain(),this.bypass=i}connect(...e){this.output.connect(...e)}disconnect(...e){this.output.disconnect(...e)}get bypass(){return this._bypass}set bypass(e){this.input.disconnect(),this.input.connect(e?this.output:this.coreInput),this._bypass=e}get dryWetMix(){return this._dryWetMix}set dryWetMix(e){this.wetNode.gain.value=o(e),this.dryNode.gain.value=c(e),this._dryWetMix=e}}class v extends f{constructor(e,t){const i=l.guitarAmp.params;super(e,t),this.slug="guitarAmp",this.gainStage=new r(e),this.gainStage.model="highGain",this.tonestackModel=new u(e),this.cabinetConvolution=e.createConvolver(),this.cabinetMakeupGain=e.createGain(),this.masterVolume=e.createGain(),this.drive=I(t.drive,i.drive.default),this.presence=I(t.presence,i.presence.default),this.treble=I(t.treble,i.treble.default),this.mid=I(t.mid,i.mid.default),this.bass=I(t.bass,i.bass.default),this.irType=I(t.irType,i.irType.default),this.master=I(t.master,i.master.default),this.coreInput.connect(this.gainStage),this.gainStage.connect(this.tonestackModel),this.tonestackModel.connect(this.cabinetConvolution),this.cabinetConvolution.connect(this.cabinetMakeupGain),this.cabinetMakeupGain.connect(this.masterVolume),this.masterVolume.connect(this.output)}destroy(){this.coreInput.disconnect(),this.gainStage.disconnect(),this.tonestackModel.disconnect(),this.cabinetConvolution.disconnect(),this.cabinetMakeupGain.disconnect(),this.masterVolume.disconnect(),this.gainStage=null,this.tonestackModel=null,this.cabinetConvolution=null,this.cabinetMakeupGain=null,this.masterVolume=null}get drive(){return this.gainStage.drive}set drive(e){this.gainStage.drive=e}get presence(){return this.tonestackModel.presence}set presence(e){this.tonestackModel.presence=e}get mid(){return this.tonestackModel.mid}set mid(e){this.tonestackModel.mid=e}get bass(){return this.tonestackModel.bass}set bass(e){this.tonestackModel.bass=e}get treble(){return this.tonestackModel.treble}set treble(e){this.tonestackModel.treble=e}get master(){return this.masterVolume.gain.value}set master(e){this.masterVolume.gain.value=.2*e}get irType(){return this._irType}set irType(e){switch(this._irType=e,this.initializing=Promise.resolve(d[e]()).then(e=>this.context.decodeAudioData(e)).then(e=>(this.tonestackModel.disconnect(this.cabinetConvolution),this.cabinetConvolution.disconnect(this.cabinetMakeupGain),this.cabinetConvolution=this.context.createConvolver(),this.tonestackModel.connect(this.cabinetConvolution),this.cabinetConvolution.connect(this.cabinetMakeupGain),this.cabinetConvolution.buffer=e,e)).catch(function(e){}),e){case"orangeClassicShort":case"mesaCabShort":case"celestonCabShort":case"jensonCabShort":case"tweedCabShort":case"bassman30Short":this.cabinetMakeupGain.gain.value=12;break;default:this.cabinetMakeupGain.gain.value=8}}}class y extends f{constructor(e,t){super(e,t);const i=l.gain.params;this.slug="gain",this.gainNode=e.createGain(),this.gain=I(t.gain,i.gain.default),this.coreInput.connect(this.gainNode),this.gainNode.connect(this.output)}destroy(){this.coreInput.disconnect(),this.gainNode.disconnect(),this.gainNode=null}get gain(){return e=this.gainNode.gain.value,t=s(t)||1e-5,e<=0&&(e=t),Math.log(parseFloat(e))/Math.LN10*20;var e,t}set gain(e){this.gainNode.gain.value=s(e)}}class g extends f{constructor(e,t){super(e,t);const i=l.antiSqueal.params;this.slug="antiSqueal",this.filters=[],this.maxFrequency=8e3,this.minFrequency=500;for(let t=0;t<4;t++){let t=e.createBiquadFilter();t.Q.value=-3,t.gain.value=0,t.type="lowpass",t.frequency.value=this.maxFrequency*Math.pow(this.minFrequency/this.maxFrequency,this.amount),this.filters.push(t)}this.amount=I(t.amount,i.amount.default),S(this.filters),this.coreInput.connect(this.filters[0]),this.filters[this.filters.length-1].connect(this.output)}destroy(){this.coreInput.disconnect();for(let e=0;e<this.filters.length;e++)this.filters[e].disconnect(),this.filters[e]=null}get amount(){return 0}set amount(e){for(let t=0;t<this.filters.length;t++)this.filters[t].frequency.value=this.maxFrequency*Math.pow(this.minFrequency/this.maxFrequency,e)}}class m extends f{constructor(e,t){super(e,t);const i=l.delay.params;this.slug="delay",this.dryNode=e.createGain(),this.wetNode=e.createGain(),this.delayNode=e.createDelay(),this.feedbackNode=e.createGain(),this.filterNode=e.createBiquadFilter(),this.feedback=I(t.feedback,i.feedback.default),this.delayTime=I(t.delayTime,i.delayTime.default),this.cutoff=I(t.cutoff,i.cutoff.default),i.dryWetMix&&(this.dryWetMix=I(t.dryWetMix,i.dryWetMix.default)),this.filterNode.Q.value=0,this.filterNode.gain.value=1,this.filterNode.type="lowpass",this.coreInput.connect(this.delayNode),this.coreInput.connect(this.dryNode),this.dryNode.connect(this.output),this.delayNode.connect(this.filterNode),this.filterNode.connect(this.feedbackNode),this.feedbackNode.connect(this.delayNode),this.filterNode.connect(this.wetNode),this.wetNode.connect(this.output)}destroy(){this.coreInput.disconnect(),this.delayNode.disconnect(),this.feedbackNode.disconnect(),this.filterNode.disconnect(),this.delayNode=null,this.feedbackNode=null,this.filterNode=null}get delayTime(){return this.delayNode.delayTime.value}set delayTime(e){this.delayNode.delayTime.value=e}get feedback(){return this.feedbackNode.gain.value}set feedback(e){this.feedbackNode.gain.value=e}get cutoff(){return this.filterNode.frequency.value}set cutoff(e){this.filterNode.frequency.value=e}}class N extends f{constructor(e,t){super(e,t);let i=l.reverb.params;this.slug="reverb",this.dryNode=e.createGain(),this.wetNode=e.createGain(),this.convolverNode=e.createConvolver(),this.irType=I(t.irType,i.irType.default),i.dryWetMix&&(this.dryWetMix=I(t.dryWetMix,i.dryWetMix.default)),this.coreInput.connect(this.convolverNode),this.coreInput.connect(this.dryNode),this.convolverNode.connect(this.wetNode),this.wetNode.connect(this.output),this.dryNode.connect(this.output)}destroy(){this.coreInput.disconnect(),this.convolverNode.disconnect(),this.dryNode.disconnect(),this.wetNode.disconnect(),this.convolverNode=null,this.dryNode=null,this.wetNode=null}get irType(){return this._irType}set irType(e){this.initializing=Promise.resolve(d[e]()).then(e=>this.context.decodeAudioData(e)).then(e=>(this.coreInput.disconnect(this.convolverNode),this.convolverNode.disconnect(this.wetNode),this.convolverNode=this.context.createConvolver(),this.convolverNode.buffer=e,this.coreInput.connect(this.convolverNode),this.convolverNode.connect(this.wetNode),e)).catch(function(e){}),this._irType=e}}class b extends f{constructor(e,t){const i=l.cabinet.params;super(e,t),this.slug="cabinet",this.convolverEffect=new N(e,{irType:t.irType,dryWetMix:1}),this.initializing=this.convolverEffect.initializing,this.makeupGainNode=e.createGain(),this.irType=I(t.irType,i.irType.default),this.makeupGain=I(t.makeupGain,i.makeupGain.default),this.coreInput.connect(this.convolverEffect.input),this.convolverEffect.output.connect(this.makeupGainNode),this.makeupGainNode.connect(this.output)}destroy(){this.coreInput.disconnect(),this.makeupGainNode.disconnect(),this.convolverEffect.destroy(),this.makeupGainNode=null}get makeupGain(){return this.makeupGainNode.gain.value}set makeupGain(e){this.makeupGainNode.gain.value=e}get irType(){return this.convolverEffect.irType}set irType(e){this.convolverEffect.irType=e,this.initializing=this.convolverEffect.initializing}}class q extends f{constructor(e,t){const i=l.overdrive.params;super(e,t),this.slug="overdrive",this.lowpassNode=e.createBiquadFilter(),this.waveShaperNode=e.createWaveShaper(),this.attenuationNode=e.createGain(),this.outputGainNode=e.createGain(),this.tone=I(t.tone,i.tone.default),this.outputGain=I(t.outputGain,i.outputGain.default),this.amount=I(t.amount,i.amount.default),this.lowpassNode.type="lowpass",this.coreInput.connect(this.waveShaperNode),this.waveShaperNode.connect(this.attenuationNode),this.attenuationNode.connect(this.lowpassNode),this.lowpassNode.connect(this.outputGainNode),this.outputGainNode.connect(this.output)}destroy(){this.coreInput.disconnect(),this.waveShaperNode.disconnect(),this.attenuationNode.disconnect(),this.outputGainNode.disconnect(),this.lowpassNode.disconnect(),this.waveShaperNode=null,this.attenuationNode=null,this.outputGainNode=null,this.lowpassNode=null}get outputGain(){return this._outputGain}set outputGain(e){let t;t=e>=5?1.2*e-6:3*e-15,this.outputGainNode.gain.value=s(t),this._outputGain=e}get tone(){return this.lowpassNode.frequency.value}set tone(e){this.lowpassNode.frequency.value=e}get amount(){return this._amount}set amount(e){this.attenuationNode.gain.value=-.05*e+1,this._amount=e,e/=10,this.waveShaperNode.curve=function(t){var i,n,s=100*e,a=22050,o=0,c=new Float32Array(a),r=Math.PI/180;for(i=0;i<a;i++)n=2*i/a-1,c[i]=(3+s)*n*20*r/(Math.PI+s*Math.abs(n)),o<Math.abs(c[i])&&(o=Math.abs(c[i]));for(i=0;i<a;i++)c[i]/=o;return c}()}}class G extends f{constructor(e,t){const i=l.filter.params;super(e,t),this.slug="filter",this.filterNode=e.createBiquadFilter(),this.filterType=I(t.filterType,i.filterType.default),this.frequency=I(t.frequency,i.frequency.default),this.gain=I(t.gain,i.gain.default),this.q=I(t.q,i.q.default),this.coreInput.connect(this.filterNode),this.filterNode.connect(this.output)}destroy(){this.coreInput.disconnect(),this.filterNode.disconnect(),this.filterNode=null}get filterType(){return this.filterNode.type}set filterType(e){this.filterNode.type=e}get q(){return this.filterNode.Q.value}set q(e){this.filterNode.Q.value=e}get gain(){return this.filterNode.gain.value}set gain(e){this.filterNode.gain.value=e}get frequency(){return this.filterNode.frequency.value}set frequency(e){this.filterNode.frequency.value=e}}class w extends f{constructor(e,t){const i=l.compressor.params;super(e,t),this.slug="compressor",this.compressorNode=e.createDynamicsCompressor(),this.makeupGainNode=e.createGain(),this.makeupGain=I(t.makeupGain,i.makeupGain.default),this.threshold=I(t.threshold,i.threshold.default),this.release=I(t.release,i.release.default),this.attack=I(t.attack,i.attack.default),this.ratio=I(t.ratio,i.ratio.default),this.knee=I(t.knee,i.knee.default),this.coreInput.connect(this.compressorNode),this.compressorNode.connect(this.makeupGainNode),this.makeupGainNode.connect(this.output)}destroy(){this.coreInput.disconnect(),this.compressorNode.disconnect(),this.makeupGainNode.disconnect(),this.compressorNode=null,this.makeupGainNode=null}get makeupGain(){return this.makeupGainNode.gain.value}set makeupGain(e){this.makeupGainNode.gain.value=e}get threshold(){return this.compressorNode.threshold.value}set threshold(e){this.compressorNode.threshold.value=e}get release(){return this.compressorNode.release.value}set release(e){this.compressorNode.release.value=e}get attack(){return this.compressorNode.attack.value}set attack(e){this.compressorNode.attack.value=e}get ratio(){return this.compressorNode.ratio.value}set ratio(e){this.compressorNode.ratio.value=e}get knee(){return this.compressorNode.knee.value}set knee(e){this.compressorNode.knee.value=e}}class k extends f{constructor(e,t){const i=l.tremolo.params;super(e,t),this.slug=l.tremolo.slug,this.splitter=e.createChannelSplitter(2),this.amplitudeL=e.createGain(),this.amplitudeR=e.createGain(),this.merger=e.createChannelMerger(2),this.lfoL=new h(e,{frequency:i.rate.default,amplitude:.5}),this.lfoR=new h(e,{frequency:i.rate.default,amplitude:.5}),this.lfoL.connect(this.amplitudeL.gain),this.lfoR.connect(this.amplitudeR.gain),this.rate=I(t.rate,i.rate.default),this.depth=I(t.depth,i.depth.default),this.spread=I(t.spread,i.spread.default),this.coreInput.connect(this.splitter),this.splitter.connect(this.amplitudeL,0),this.splitter.connect(this.amplitudeR,1),this.amplitudeL.connect(this.merger,0,0),this.amplitudeR.connect(this.merger,0,1),this.merger.connect(this.output)}destroy(){this.coreInput.disconnect(),this.input.disconnect(),this.splitter.disconnect(),this.amplitudeL.disconnect(),this.amplitudeR.disconnect(),this.merger.disconnect(),this.output.disconnect(),this.lfoL.destroy(),this.lfoR.destroy()}connect(e){this.output.connect(e&&e.input?e.input:e),this.lfoL.start(),this.lfoR.start()}disconnect(){this.output.disconnect(),this.lfoL.stop(),this.lfoR.stop()}get depth(){return this._depth}set depth(e){this._depth=e,this.amplitudeL.gain.value=1-this._depth/2,this.amplitudeR.gain.value=1-this._depth/2,this.lfoL.amplitude=this._depth/2,this.lfoR.amplitude=this._depth/2}get rate(){return this._rate}set rate(e){this._rate=e,this.lfoL.frequency=this._rate,this.lfoR.frequency=this._rate}get spread(){return this.lfoR.phase-this.lfoL.phase}set spread(e){this.lfoL.phase=90-e/2,this.lfoR.phase=e/2+90}}class F extends f{constructor(e,t){const i=l.chorus.params;super(e,t),this.slug=l.chorus.slug,this.attenuator=e.createGain(),this.splitter=e.createChannelSplitter(2),this.delayL=e.createDelay(),this.delayR=e.createDelay(),this.feedbackGainNodeLR=e.createGain(),this.feedbackGainNodeRL=e.createGain(),this.merger=e.createChannelMerger(2),this.delayL.delayTime.value=0,this.delayR.delayTime.value=0,this.lfoL=new h(e,{frequency:i.rate.default,amplitude:i.delay.max-i.delay.min,phase:0}),this.lfoR=new h(e,{frequency:i.rate.default,amplitude:i.delay.max-i.delay.min,phase:180}),this.lfoL.connect(this.delayL.delayTime),this.lfoR.connect(this.delayR.delayTime),this._depth=0,this.feedback=I(t.feedback,i.feedback.default),this.rate=I(t.rate,i.rate.default),this.delay=I(t.delay,i.delay.default),this.depth=I(t.depth,i.depth.default),this.attenuator.gain.value=.6934,this.coreInput.connect(this.attenuator),this.attenuator.connect(this.output),this.attenuator.connect(this.splitter),this.splitter.connect(this.delayL,0),this.splitter.connect(this.delayR,1),this.delayL.connect(this.feedbackGainNodeLR),this.delayR.connect(this.feedbackGainNodeRL),this.feedbackGainNodeLR.connect(this.delayR),this.feedbackGainNodeRL.connect(this.delayL),this.delayL.connect(this.merger,0,0),this.delayR.connect(this.merger,0,1),this.merger.connect(this.output)}destroy(){this.coreInput.disconnect(),this.input.disconnect(),this.splitter.disconnect(),this.attenuator.disconnect(),this.delayL.disconnect(),this.delayR.disconnect(),this.merger.disconnect(),this.output.disconnect(),this.feedbackGainNodeLR.disconnect(),this.feedbackGainNodeRL.disconnect(),this.lfoL.destroy(),this.lfoR.destroy()}connect(e){this.output.connect(e&&e.input?e.input:e),this.lfoL.start(),this.lfoR.start()}disconnect(){this.output.disconnect(),this.lfoL.stop(),this.lfoR.stop()}get delay(){return this._delay}set delay(e){this._delay=e/10}get depth(){return this._depth}set depth(e){this._depth=e,this.delayL.delayTime.value=this._delay,this.lfoL.amplitude=this._delay*this._depth,this.delayR.delayTime.value=this._delay,this.lfoR.amplitude=this._delay*this._depth}get feedback(){return this._feedback}set feedback(e){this._feedback=e,this.feedbackGainNodeLR.gain.value=this._feedback,this.feedbackGainNodeRL.gain.value=this._feedback}get rate(){return this._rate}set rate(e){this._rate=e,this.lfoL.frequency=this._rate,this.lfoR.frequency=this._rate}}class x extends f{constructor(e,t){super(e,t);const i=l.phaser.params;this.slug=l.phaser.slug,this.stage=4,this.splitter=e.createChannelSplitter(2),this.filtersL=[],this.filtersR=[],this.feedbackGainNodeL=e.createGain(),this.feedbackGainNodeR=e.createGain(),this.merger=e.createChannelMerger(2),this.gainNode=e.createGain(),this.lfoL=new h(e,{frequency:i.rate.default,amplitude:i.maxFrequency.default-i.minFrequency.default,phase:0}),this.lfoR=new h(e,{frequency:i.rate.default,amplitude:i.maxFrequency.default-i.minFrequency.default,phase:180});let n=this.stage;for(;n--;)this.filtersL[n]=e.createBiquadFilter(),this.filtersR[n]=e.createBiquadFilter(),this.filtersL[n].type="allpass",this.filtersR[n].type="allpass";this._minFrequency=i.minFrequency.min,this._maxFrequency=i.maxFrequency.max,this._phase=i.phase.default,this.rate=I(t.rate,i.rate.default),this.maxFrequency=I(t.maxFrequency,i.maxFrequency.default),this.minFrequency=I(t.minFrequency,i.minFrequency.default),this.feedback=I(t.feedback,i.feedback.default),this.phase=I(t.phase,i.phase.default),this.filtersL.forEach(e=>{this.lfoL.connect(e.frequency)}),this.filtersR.forEach(e=>{this.lfoR.connect(e.frequency)}),this.coreInput.connect(this.gainNode),this.coreInput.connect(this.splitter),this.splitter.connect(this.filtersL[0],0,0),this.splitter.connect(this.filtersR[0],1,0),S(this.filtersL),S(this.filtersR),this.filtersL[this.stage-1].connect(this.feedbackGainNodeL),this.filtersL[this.stage-1].connect(this.merger,0,0),this.filtersR[this.stage-1].connect(this.feedbackGainNodeR),this.filtersR[this.stage-1].connect(this.merger,0,1),this.feedbackGainNodeL.connect(this.filtersL[0]),this.feedbackGainNodeR.connect(this.filtersR[0]),this.merger.connect(this.gainNode),this.gainNode.gain.value*=.5,this.gainNode.connect(this.output)}updateBasicRange(){if(!(this._minFrequency>this._maxFrequency)){this.lfoL.amplitude=(this._maxFrequency-this._minFrequency)/2,this.lfoR.amplitude=(this._maxFrequency-this._minFrequency)/2;for(var e=0;e<this.stage;e++)this.filtersL[e].frequency.value=this._minFrequency+this.lfoL.amplitude,this.filtersR[e].frequency.value=this._minFrequency+this.lfoR.amplitude}}destroy(){this.coreInput.disconnect(),this.input.disconnect(),this.splitter.disconnect(),this.merger.disconnect(),this.gainNode.disconnect(),this.output.disconnect(),this.feedbackGainNodeL.disconnect(),this.feedbackGainNodeR.disconnect(),this.lfoL.destroy(),this.lfoR.destroy()}connect(e){this.output.connect(e&&e.input?e.input:e),this.lfoL.start(),this.lfoR.start()}disconnect(){this.output.disconnect(),this.lfoL.stop(),this.lfoR.stop()}get minFrequency(){return this._minFrequency}set minFrequency(e){this._minFrequency=e,this.updateBasicRange()}get maxFrequency(){return this._maxFrequency}set maxFrequency(e){this._maxFrequency=e,this.updateBasicRange()}get rate(){return this._rate}set rate(e){this._rate=e,this.lfoL.frequency=this._rate,this.lfoR.frequency=this._rate}get feedback(){return this._feedback}set feedback(e){this._feedback=e,this.feedbackGainNodeL.gain.value=this._feedback,this.feedbackGainNodeR.gain.value=this._feedback}get phase(){return this._phase}set phase(e){this._phase=e,this.lfoR.phase=this._phase}}class M extends f{constructor(e,t){const i=l.threeBandEq.params;super(e,t),this.slug="threeBandEq",this.lowFilterNode=e.createBiquadFilter(),this.midFilterNode=e.createBiquadFilter(),this.highFilterNode=e.createBiquadFilter(),this.lowFreq=I(t.lowFreq,i.lowFreq.default),this.lowGain=I(t.lowGain,i.lowGain.default),this.midFreq=I(t.midFreq,i.midFreq.default),this.midGain=I(t.midGain,i.midGain.default),this.midQ=I(t.midQ,i.midQ.default),this.highFreq=I(t.highFreq,i.highFreq.default),this.highGain=I(t.highGain,i.highGain.default),this.lowFilterNode.type="lowshelf",this.midFilterNode.type="peaking",this.highFilterNode.type="highshelf",this.coreInput.connect(this.lowFilterNode),this.lowFilterNode.connect(this.midFilterNode),this.midFilterNode.connect(this.highFilterNode),this.highFilterNode.connect(this.output)}destroy(){this.coreInput.disconnect(),this.lowFilterNode.disconnect(),this.midFilterNode.disconnect(),this.highFilterNode.disconnect(),this.lowFilterNode=null,this.midFilterNode=null,this.highFilterNode=null}get lowGain(){return this.lowFilterNode.gain.value}set lowGain(e){this.lowFilterNode.gain.value=e}get lowFreq(){return this.lowFilterNode.frequency.value}set lowFreq(e){this.lowFilterNode.frequency.value=e}get midGain(){return this.midFilterNode.gain.value}set midGain(e){this.midFilterNode.gain.value=e}get midFreq(){return this.midFilterNode.frequency.value}set midFreq(e){this.midFilterNode.frequency.value=e}get midQ(){return this.midFilterNode.Q.value}set midQ(e){this.midFilterNode.Q.value=e}get highGain(){return this.highFilterNode.gain.value}set highGain(e){this.highFilterNode.gain.value=e}get highFreq(){return this.highFilterNode.frequency.value}set highFreq(e){this.highFilterNode.frequency.value=e}}class T extends f{constructor(e,t){super(e,t);const n=l.reverbHybrid.params;this.slug="reverbHybrid",this.dryNode=e.createGain(),this.wetNode=e.createGain(),this.convolverNode=e.createConvolver(),this.makeupGain=e.createGain(),this.reverb=new i(e),this.basicAttenuation=e.createGain(),this.basicAttenuation.gain.value=s(-11),this.makeupGain.gain.value=4,this.reverb.wetDryMix=1,this.coreInput.connect(this.dryNode),this.coreInput.connect(this.convolverNode),this.convolverNode.connect(this.reverb),this.reverb.connect(this.makeupGain),this.makeupGain.connect(this.wetNode),this.wetNode.connect(this.output),this.dryNode.connect(this.output),this.irType=I(t.irType,n.irType.default),this.roomSize=I(t.roomSize,n.roomSize.default),this.dampening=I(t.dampening,n.dampening.default),this.spread=I(t.spread,n.spread.default),n.dryWetMix&&(this.dryWetMix=I(t.dryWetMix,n.dryWetMix.default))}destroy(){this.coreInput.disconnect(),this.wetNode.disconnect(),this.dryNode.disconnect(),this.reverb.disconnect(),this.dryNode=null,this.wetNode=null,this.reverb=null}get dryWetMix(){return this._dryWetMix}set dryWetMix(e){var t;e=a((1,(t=e)>=0&&t<=1?t:Error("Level of effect must be set between 0 and 1")),0,.7,0,1),this.wetNode.gain.value=o(e),this.dryNode.gain.value=c(e),this._dryWetMix=e}get irType(){return this._irType}set irType(e){const t=this.reverb.dampening,n=this.reverb.roomSize,s=this.reverb.spread,a=this.reverb.wetDryMix;this._irType=e,this.coreInput.disconnect(),this.coreInput.connect(this.dryNode),this.convolverNode.disconnect(),this.reverb.disconnect(),this.basicAttenuation.disconnect(),this.makeupGain.disconnect(),this.reverb=new i(this.context),this.reverb.wetDryMix=a,this.reverb.dampening=t,this.reverb.roomSize=n,this.reverb.spread=s,"basic"===e?(this.coreInput.connect(this.reverb),this.reverb.connect(this.basicAttenuation),this.basicAttenuation.connect(this.wetNode)):(this.coreInput.connect(this.convolverNode),this.convolverNode.connect(this.reverb),this.reverb.connect(this.makeupGain),this.makeupGain.connect(this.wetNode),this.initializing=Promise.resolve(d[e]()).then(e=>this.context.decodeAudioData(e)).then(e=>(this.coreInput.disconnect(this.convolverNode),this.convolverNode.disconnect(this.reverb),this.convolverNode=this.context.createConvolver(),this.coreInput.connect(this.convolverNode),this.convolverNode.connect(this.reverb),this.convolverNode.buffer=e,e)).catch(function(e){}))}get roomSize(){return this.reverb.roomSize}set roomSize(e){this.reverb.roomSize=a(e,.5,.95,0,10)}get dampening(){return this.reverb.dampening}set dampening(e){this.reverb.dampening=e}get spread(){return this.reverb.spread}set spread(e){this.reverb.spread=a(e,0,35e-5,0,10)}}class _ extends f{constructor(t,i){super(t,i);const n=l.springReverb.params;this.slug="springReverb",this.dryNode=t.createGain(),this.wetNode=t.createGain(),this.scale=t.createGain(),this.convolverNode=t.createConvolver(),this.delayNode=t.createDelay(.1),this.feedbackNode=t.createDelay(.1),this.feedback=t.createGain(),this.allpassNode=new e(t),this.lowpassNode=t.createBiquadFilter(),this.coreInput.connect(this.dryNode),this.coreInput.connect(this.scale),this.scale.connect(this.convolverNode),this.convolverNode.connect(this.delayNode),this.delayNode.connect(this.wetNode),this.convolverNode.connect(this.feedbackNode),this.feedbackNode.connect(this.allpassNode),this.allpassNode.connect(this.feedback),this.feedback.connect(this.convolverNode),this.wetNode.connect(this.lowpassNode),this.lowpassNode.connect(this.output),this.dryNode.connect(this.output),this.lowpassNode.Q.value=-3.0102999566398125,this.lowpassNode.type="lowpass",this.lowpassNode.gain.value=1,this.lowpassNode.frequency.value=15435,this.scale.gain.value=2.62,this.feedback.gain.value=4.08,this.delayNode.delayTime.value=.022,this.feedbackNode.delayTime.value=.053,this.allpassNode.setDelayTime(300/t.sampleRate),this.allpassNode.setCoefficient(-.618);const s=this.convolverNode;this.initializing=Promise.resolve(d.spring_IR()).then(e=>this.context.decodeAudioData(e)).then(function(e){return s.normalize=!0,s.buffer=e,e}).catch(function(e){}),n.dryWetMix&&(this.dryWetMix=I(i.dryWetMix,n.dryWetMix.default))}destroy(){this.coreInput.disconnect(),this.dryNode.disconnect(),this.wetNode.disconnect(),this.scale.disconnect(),this.convolverNode.disconnect(),this.allpassNode.disconnect(),this.lowpassNode.disconnect(),this.delayNode.disconnect(),this.feedbackNode.disconnect(),this.feedback.disconnect(),this.dryNode=null,this.wetNode=null,this.scale=null,this.convolverNode=null,this.allpassNode=null,this.lowpassNode=null,this.delayNode=null,this.feedbackNode=null,this.feedback=null}}class R extends f{constructor(e,t,i,n,s=1){super(e,i,n);const a=l[t].params;this.slug=t,this.isMono=1===s,this.serafiniNode=new L(e,t,i,n,s),this.isMono?(this.gainNode=e.createGain(),this.splitterNode=e.createChannelSplitter(2),this.mergerNode=e.createChannelMerger(2),this.gainNode.gain.value=.5,this.coreInput.connect(this.splitterNode),this.splitterNode.connect(this.gainNode,0),this.splitterNode.connect(this.gainNode,1),this.gainNode.connect(this.serafiniNode),this.serafiniNode.connect(this.mergerNode,0,0),this.serafiniNode.connect(this.mergerNode,0,1),this.mergerNode.connect(this.output)):(this.coreInput.connect(this.serafiniNode),this.serafiniNode.connect(this.output)),Object.keys(a).forEach(e=>{i[e]=I(i[e],a[e].default)}),Object.keys(i).map(e=>{Object.defineProperty(this,e,{set:function(t){this.serafiniNode.setParam(e,t),this[`_${e}`]=t},get:function(){return this[`_${e}`]}}),this[e]=i[e]})}destroy(){this.serafiniNode.disabled=!0,setTimeout(()=>{this.isMono?(this.coreInput.disconnect(),this.splitterNode.disconnect(),this.gainNode.disconnect(),this.serafiniNode.disconnect(),this.mergerNode.disconnect(),this.output.disconnect(),this.splitterNode=null,this.gainNode=null,this.serafiniNode=null,this.mergerNode=null):(this.coreInput.disconnect(),this.serafiniNode.disconnect(),this.output.disconnect(),this.serafiniNode=null)})}}class L extends AudioWorkletNode{constructor(e,t,i,n,s=1){let a={channelCount:s,channelCountMode:"explicit"};a.processorOptions={effectName:t,params:i,realTime:e instanceof AudioContext},super(e,"sfEffect-processor",a)}get bypass(){return this._bypass}set bypass(e){this._bypass=e,this.port.postMessage({id:"bypass",val:e})}get disabled(){return this._disabled}set disabled(e){this._disabled=e,this.port.postMessage({message:"disable"})}setParam(e,t){this.port.postMessage({id:e,val:t})}}function I(e,t){return void 0===e?t:e}function S(e){for(var t=e.length-1;t--;){if(!e[t].connect)return;e[t+1].input?e[t].connect(e[t+1].input):e[t].connect(e[t+1])}}class C extends AudioWorkletNode{constructor(e){super(e,"vasynth-processor",{channelCount:2,channelCountMode:"explicit"})}setParam(e,t){this.port.postMessage({id:e,val:t})}onMIDIEvent(e,t){this.port.postMessage({id:"MIDI",val:{msg:e,offset:t}})}loadPresetJSON(e){this.port.postMessage({id:"loadPreset",val:{json:e}})}disable(){this.port.postMessage({message:"disable"})}}return function({irFileBuffers:e,metadata:t}){return{FxChain:(i={irFileBuffers:e,metadata:t},n=function({irFileBuffers:e,metadata:t}){return d=e,l=t,{createFx:p}}(i),function(e,t){const i=this;i.initializing=[],i.effects=[],i.context=e,i.input=e.createGain(),i.output=e.createGain(),i.isBypassed=!1,i.addFxs=function(e){e&&(Array.isArray(e)||(e=[e]),e.forEach(e=>{var t,s=n.createFx(i.context,e);0!==i.effects.length||i.isBypassed||(i.input.disconnect(),i.input.connect(s.input)),i.effects.length>0&&((t=i.effects[i.effects.length-1].output).disconnect(),t.connect(s.input)),i.isBypassed||s.connect(i.output),i.effects.push(s),i.initializing.push(s.initializing)}))},t&&t.length?i.addFxs(t):i.input.connect(i.output),i.cleanFxs=function(){i.input.disconnect(),i.input.connect(i.output),i.initializing=[],i.effects.length>0&&(i.effects.forEach(e=>e.destroy()),i.effects=[])},i.connect=function(e){i.output.connect(e)},i.disconnect=function(e){i.output.disconnect(e)},i.bypass=function(e){var t;if(i.isBypassed!==e&&(i.isBypassed=e,i.effects.length))if(e)i.input.disconnect(),i.effects.forEach(e=>e.disconnect()),i.input.connect(i.output);else{for(i.input.disconnect(),i.input.connect(i.effects[0].input),t=0;t<i.effects.length-1;t++)i.effects[t].disconnect(),i.effects[t].connect(i.effects[t+1].input);i.effects[i.effects.length-1].connect(i.output)}}}),metadata:t,VaSynth:C};var i,n}});